// <auto-generated />
using System;
using Bakim.Dataaccess.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bakim.Dataaccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230228073527_stockamountfortasks")]
    partial class stockamountfortasks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bakim.Entity.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AnnouncementId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Bakim.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Bakim.Entity.Birim", b =>
                {
                    b.Property<int>("BirimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BirimAdi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BirimId");

                    b.ToTable("Birimler");
                });

            modelBuilder.Entity("Bakim.Entity.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("EndDate")
                        .HasColumnType("longtext");

                    b.Property<string>("RecurrenceException")
                        .HasColumnType("longtext");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("longtext");

                    b.Property<int>("RoutineBakimTuruId")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("longtext");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("CalendarId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Bakim.Entity.Call", b =>
                {
                    b.Property<int>("CallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ComplationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("MakineId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("CallId");

                    b.HasIndex("MachineId");

                    b.HasIndex("UserId");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("Bakim.Entity.Corporation", b =>
                {
                    b.Property<int>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CorporationAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorporationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorporationNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Passive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CorporationId");

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("Bakim.Entity.DetayGroup", b =>
                {
                    b.Property<int>("DetayGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DetayGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("VarlikGroupId")
                        .HasColumnType("int");

                    b.HasKey("DetayGroupId");

                    b.HasIndex("VarlikGroupId")
                        .IsUnique();

                    b.ToTable("DetayGrubu");
                });

            modelBuilder.Entity("Bakim.Entity.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("DetayGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<bool>("InUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductionSectionId")
                        .HasColumnType("int");

                    b.HasKey("MachineId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("DetayGroupId");

                    b.HasIndex("ProductionSectionId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Bakim.Entity.ProductionSection", b =>
                {
                    b.Property<int>("ProductionSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductionSectionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductionSectionId");

                    b.ToTable("ProductionSections");
                });

            modelBuilder.Entity("Bakim.Entity.RoutineBakim", b =>
                {
                    b.Property<int>("RoutineBakimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BakimAciklamasi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BakimAdi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BakimTarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PlanlamaTarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoutineBakimTuruId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoutineBakimId");

                    b.ToTable("RoutineBakimlar");
                });

            modelBuilder.Entity("Bakim.Entity.RoutineBakimMakine", b =>
                {
                    b.Property<int>("RoutineBakimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BakimAciklamasi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BakimAdi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BakimTarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlanlamaTarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoutineBakimId");

                    b.ToTable("routineBakimMakines");
                });

            modelBuilder.Entity("Bakim.Entity.RoutineBakimTuru", b =>
                {
                    b.Property<int>("RoutineBakimTuruId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoutineBakimTurAdi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoutineBakimTuruId");

                    b.ToTable("routinebakimturu");
                });

            modelBuilder.Entity("Bakim.Entity.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Bakim.Entity.SectionFault", b =>
                {
                    b.Property<int>("SectionFaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SectionFaultDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SectionFaultName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SectionFaultId");

                    b.ToTable("SectionFaults");
                });

            modelBuilder.Entity("Bakim.Entity.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<int>("MaxStock")
                        .HasColumnType("int");

                    b.Property<int>("MinStock")
                        .HasColumnType("int");

                    b.Property<string>("Olcu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<string>("StockCode")
                        .HasColumnType("longtext");

                    b.Property<int>("StockGroupId")
                        .HasColumnType("int");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StokKategoriId")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("StockGroupId");

                    b.HasIndex("StokKategoriId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Bakim.Entity.StockGroup", b =>
                {
                    b.Property<int>("StockGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StockGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StockGroupId");

                    b.ToTable("StockGroups");
                });

            modelBuilder.Entity("Bakim.Entity.Stok_Firma", b =>
                {
                    b.Property<int>("StokFirmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FirmaId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("StokFirmaId");

                    b.ToTable("Stok_Firmas");
                });

            modelBuilder.Entity("Bakim.Entity.StokKategori", b =>
                {
                    b.Property<int>("StokKategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StockGroupId")
                        .HasColumnType("int");

                    b.Property<string>("StokKategoriName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StokKategoriId");

                    b.ToTable("StokKategorisi");
                });

            modelBuilder.Entity("Bakim.Entity.Talep", b =>
                {
                    b.Property<int>("TalepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Aciklama")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("BirimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FirmaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Miktar")
                        .HasColumnType("int");

                    b.Property<int?>("Olcu")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("TalepAdi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VarlikId")
                        .HasColumnType("int");

                    b.HasKey("TalepId");

                    b.ToTable("Talepler");
                });

            modelBuilder.Entity("Bakim.Entity.Task_Stock", b =>
                {
                    b.Property<int>("Task_StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Task_StockId");

                    b.ToTable("Task_Stock");
                });

            modelBuilder.Entity("Bakim.Entity.TedarikciFirma", b =>
                {
                    b.Property<int>("FirmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirmaAdi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("FirmaId");

                    b.ToTable("tedarikciFirmalar");
                });

            modelBuilder.Entity("Bakim.Entity.UserAnnouncement", b =>
                {
                    b.Property<int>("UserAnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("HasSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SeenDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserAnnouncementId");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserAnnouncements");
                });

            modelBuilder.Entity("Bakim.Entity.Varlik", b =>
                {
                    b.Property<int>("VarlikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("DetayGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<bool>("InUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductionSectionId")
                        .HasColumnType("int");

                    b.Property<string>("VarlikCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VarlikGroupId")
                        .HasColumnType("int");

                    b.Property<string>("VarlikName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VarlikId");

                    b.HasIndex("DetayGroupId");

                    b.HasIndex("VarlikGroupId");

                    b.ToTable("varlik");
                });

            modelBuilder.Entity("Bakim.Entity.VarlikGroup", b =>
                {
                    b.Property<int>("VarlikGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Pasif")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("VarlikGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VarlikGroupId");

                    b.ToTable("VarlikGroups");
                });

            modelBuilder.Entity("Bakim.Entity.Views.atanankullanicilar", b =>
                {
                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("InProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("longtext");

                    b.Property<string>("StarterId")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToView("atanankullanicilar");
                });

            modelBuilder.Entity("Bakim.Entity.WorkTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Acil")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<bool>("InProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ProcessStartedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SectionFaultId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("StarterId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VarlikId")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SectionFaultId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StarterId");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("Bakim.Entity.WorkTaskTransfer", b =>
                {
                    b.Property<int>("WorkTaskTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("TransferredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransferredUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("WorkTaskId")
                        .HasColumnType("int");

                    b.HasKey("WorkTaskTransferId");

                    b.HasIndex("TransferredUserId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("WorkTaskTransfers");
                });

            modelBuilder.Entity("Bakim.Entity.WorkTaskUser", b =>
                {
                    b.Property<int>("WorkTaskUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("InProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("WorkTaskId")
                        .HasColumnType("int");

                    b.HasKey("WorkTaskUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("WorkTaskUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bakim.Entity.Call", b =>
                {
                    b.HasOne("Bakim.Entity.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bakim.Entity.DetayGroup", b =>
                {
                    b.HasOne("Bakim.Entity.VarlikGroup", null)
                        .WithOne("detayGrubu")
                        .HasForeignKey("Bakim.Entity.DetayGroup", "VarlikGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bakim.Entity.Machine", b =>
                {
                    b.HasOne("Bakim.Entity.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.DetayGroup", "DetayGroup")
                        .WithMany()
                        .HasForeignKey("DetayGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.ProductionSection", "ProductionSection")
                        .WithMany()
                        .HasForeignKey("ProductionSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("DetayGroup");

                    b.Navigation("ProductionSection");
                });

            modelBuilder.Entity("Bakim.Entity.Stock", b =>
                {
                    b.HasOne("Bakim.Entity.StockGroup", "stokGrubu")
                        .WithMany()
                        .HasForeignKey("StockGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.StokKategori", "stokKategori")
                        .WithMany()
                        .HasForeignKey("StokKategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stokGrubu");

                    b.Navigation("stokKategori");
                });

            modelBuilder.Entity("Bakim.Entity.UserAnnouncement", b =>
                {
                    b.HasOne("Bakim.Entity.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Bakim.Entity.Varlik", b =>
                {
                    b.HasOne("Bakim.Entity.DetayGroup", "DetayGroup")
                        .WithMany()
                        .HasForeignKey("DetayGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.VarlikGroup", "VarlikGroup")
                        .WithMany()
                        .HasForeignKey("VarlikGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetayGroup");

                    b.Navigation("VarlikGroup");
                });

            modelBuilder.Entity("Bakim.Entity.WorkTask", b =>
                {
                    b.HasOne("Bakim.Entity.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Bakim.Entity.SectionFault", "SectionFault")
                        .WithMany()
                        .HasForeignKey("SectionFaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.ApplicationUser", "Starter")
                        .WithMany()
                        .HasForeignKey("StarterId");

                    b.Navigation("Creator");

                    b.Navigation("Receiver");

                    b.Navigation("Section");

                    b.Navigation("SectionFault");

                    b.Navigation("Starter");
                });

            modelBuilder.Entity("Bakim.Entity.WorkTaskTransfer", b =>
                {
                    b.HasOne("Bakim.Entity.ApplicationUser", "TransferredUser")
                        .WithMany()
                        .HasForeignKey("TransferredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.WorkTask", "WorkTask")
                        .WithMany()
                        .HasForeignKey("WorkTaskId");

                    b.Navigation("TransferredUser");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("Bakim.Entity.WorkTaskUser", b =>
                {
                    b.HasOne("Bakim.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Bakim.Entity.WorkTask", "WorkTask")
                        .WithMany()
                        .HasForeignKey("WorkTaskId");

                    b.Navigation("User");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bakim.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bakim.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bakim.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bakim.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bakim.Entity.VarlikGroup", b =>
                {
                    b.Navigation("detayGrubu")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
